buddystore.c.diff:<     dout(10) << "[EUNJI] " << __func__ << "op = " << optable[op->op] <<" "<< op->op << dendl;
buddystore.c.diff:<     switch (op->op) {
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         uint64_t off = op->off;
buddystore.c.diff:<         uint64_t len = op->len;
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         uint64_t off = op->off;
buddystore.c.diff:<         uint64_t len = op->len;
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         uint64_t off = op->off;
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         ghobject_t noid = i.get_oid(op->dest_oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         ghobject_t noid = i.get_oid(op->dest_oid);
buddystore.c.diff:<         uint64_t off = op->off;
buddystore.c.diff:<         uint64_t len = op->len;
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         ghobject_t noid = i.get_oid(op->dest_oid);
buddystore.c.diff:<         uint64_t srcoff = op->off;
buddystore.c.diff:<         uint64_t len = op->len;
buddystore.c.diff:<         uint64_t dstoff = op->dest_off;
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:< 	r = _create_collection(cid, op->split_bits);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         uint32_t type = op->hint_type;
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         coll_t ocid = i.get_cid(op->cid);
buddystore.c.diff:<         coll_t ncid = i.get_cid(op->dest_cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t oldcid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oldoid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t newcid = i.get_cid(op->dest_cid);
buddystore.c.diff:<         ghobject_t newoid = i.get_oid(op->dest_oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oldoid = i.get_oid(op->oid);
buddystore.c.diff:<         ghobject_t newoid = i.get_oid(op->dest_oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         ghobject_t oid = i.get_oid(op->oid);
buddystore.c.diff:<         coll_t cid = i.get_cid(op->cid);
buddystore.c.diff:<         uint32_t bits = op->split_bits;
buddystore.c.diff:<         uint32_t rem = op->split_rem;
buddystore.c.diff:<         coll_t dest = i.get_cid(op->dest_cid);
buddystore.c.diff:<       derr << "bad op " << op->op << dendl;
buddystore.c.diff:<       if (r == -ENOENT && !(op->op == Transaction::OP_CLONERANGE ||
buddystore.c.diff:< 			    op->op == Transaction::OP_CLONE ||
buddystore.c.diff:< 			    op->op == Transaction::OP_CLONERANGE2 ||
buddystore.c.diff:< 			    op->op == Transaction::OP_COLL_ADD))
buddystore.c.diff:< 	if (r == -ENOENT && (op->op == Transaction::OP_CLONERANGE ||
buddystore.c.diff:< 			     op->op == Transaction::OP_CLONE ||
buddystore.c.diff:< 			     op->op == Transaction::OP_CLONERANGE2))
buddystore.c.diff:< 	derr    << " error " << cpp_strerror(r) << " not handled on operation " << op->op
buddystore.c.diff:<     dout(10) << "[EUNJI] " << __func__ << "op = " << optable[op->op] <<" "<< op->op << dendl;
ObjectStore.h:      switch (op->op) {
ObjectStore.h:        assert(op->cid < cm.size());
ObjectStore.h:        assert(op->oid < om.size());
ObjectStore.h:        op->cid = cm[op->cid];
ObjectStore.h:        op->oid = om[op->oid];
ObjectStore.h:        assert(op->cid < cm.size());
ObjectStore.h:        assert(op->oid < om.size());
ObjectStore.h:        assert(op->dest_oid < om.size());
ObjectStore.h:        op->cid = cm[op->cid];
ObjectStore.h:        op->oid = om[op->oid];
ObjectStore.h:        op->dest_oid = om[op->dest_oid];
ObjectStore.h:        assert(op->cid < cm.size());
ObjectStore.h:        op->cid = cm[op->cid];
ObjectStore.h:        assert(op->cid < cm.size());
ObjectStore.h:        assert(op->oid < om.size());
ObjectStore.h:        assert(op->dest_cid < om.size());
ObjectStore.h:        op->cid = cm[op->cid];
ObjectStore.h:        op->dest_cid = cm[op->dest_cid];
ObjectStore.h:        op->oid = om[op->oid];
ObjectStore.h:        assert(op->cid < cm.size());
ObjectStore.h:        assert(op->oid < om.size());
ObjectStore.h:        assert(op->dest_cid < cm.size());
ObjectStore.h:        assert(op->dest_oid < om.size());
ObjectStore.h:        op->cid = cm[op->cid];
ObjectStore.h:        op->oid = om[op->oid];
ObjectStore.h:        op->dest_cid = cm[op->dest_cid];
ObjectStore.h:        op->dest_oid = om[op->dest_oid];
ObjectStore.h:        assert(op->cid < cm.size());
ObjectStore.h:        assert(op->oid < om.size());
ObjectStore.h:        assert(op->dest_oid < om.size());
ObjectStore.h:        op->cid = cm[op->cid];
ObjectStore.h:        op->oid = om[op->oid];
ObjectStore.h:        op->dest_oid = om[op->dest_oid];
ObjectStore.h:        assert(op->cid < cm.size());
ObjectStore.h:	assert(op->dest_cid < cm.size());
ObjectStore.h:        op->cid = cm[op->cid];
ObjectStore.h:        op->dest_cid = cm[op->dest_cid];
ObjectStore.h:      _op->op = OP_STARTSYNC;
ObjectStore.h:      _op->op = OP_NOP;
ObjectStore.h:      _op->op = OP_TOUCH;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_WRITE;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->off = off;
ObjectStore.h:      _op->len = len;
ObjectStore.h:      _op->op = OP_ZERO;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->off = off;
ObjectStore.h:      _op->len = len;
ObjectStore.h:      _op->op = OP_TRUNCATE;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->off = off;
ObjectStore.h:      _op->op = OP_REMOVE;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_SETATTR;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_SETATTRS;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_SETATTRS;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_RMATTR;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_RMATTRS;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_CLONE;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->dest_oid = _get_object_id(noid);
ObjectStore.h:      _op->op = OP_CLONERANGE2;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->dest_oid = _get_object_id(noid);
ObjectStore.h:      _op->off = srcoff;
ObjectStore.h:      _op->len = srclen;
ObjectStore.h:      _op->dest_off = dstoff;
ObjectStore.h:      _op->op = OP_MKCOLL;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->split_bits = bits;
ObjectStore.h:      _op->op = OP_COLL_HINT;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->hint_type = type;
ObjectStore.h:      _op->op = OP_RMCOLL;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:	_op->op = OP_COLL_ADD;
ObjectStore.h:	_op->cid = _get_coll_id(oldcid);
ObjectStore.h:	_op->oid = _get_object_id(oid);
ObjectStore.h:	_op->dest_cid = _get_coll_id(cid);
ObjectStore.h:	_op->op = OP_COLL_REMOVE;
ObjectStore.h:	_op->cid = _get_coll_id(oldcid);
ObjectStore.h:	_op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_COLL_MOVE_RENAME;
ObjectStore.h:      _op->cid = _get_coll_id(oldcid);
ObjectStore.h:      _op->oid = _get_object_id(oldoid);
ObjectStore.h:      _op->dest_cid = _get_coll_id(cid);
ObjectStore.h:      _op->dest_oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_TRY_RENAME;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oldoid);
ObjectStore.h:      _op->dest_oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_OMAP_CLEAR;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_OMAP_SETKEYS;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_OMAP_SETKEYS;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_OMAP_RMKEYS;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_OMAP_RMKEYS;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:	_op->op = OP_OMAP_RMKEYRANGE;
ObjectStore.h:	_op->cid = _get_coll_id(cid);
ObjectStore.h:	_op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_OMAP_SETHEADER;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->op = OP_SPLIT_COLLECTION2;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->dest_cid = _get_coll_id(destination);
ObjectStore.h:      _op->split_bits = bits;
ObjectStore.h:      _op->split_rem = rem;
ObjectStore.h:      _op->op = OP_COLL_SET_BITS;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->split_bits = bits;
ObjectStore.h:      _op->op = OP_SETALLOCHINT;
ObjectStore.h:      _op->cid = _get_coll_id(cid);
ObjectStore.h:      _op->oid = _get_object_id(oid);
ObjectStore.h:      _op->expected_object_size = expected_object_size;
ObjectStore.h:      _op->expected_write_size = expected_write_size;
ObjectStore.h:      _op->alloc_hint_flags = flags;
Transaction.cc:    switch (op->op) {
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        uint64_t off = op->off;
Transaction.cc:        uint64_t len = op->len;
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        uint64_t off = op->off;
Transaction.cc:        uint64_t len = op->len;
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        uint64_t off = op->off;
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        ghobject_t noid = i.get_oid(op->dest_oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        ghobject_t noid = i.get_oid(op->dest_oid);
Transaction.cc:        uint64_t off = op->off;
Transaction.cc:        uint64_t len = op->len;
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        ghobject_t noid = i.get_oid(op->dest_oid);
Transaction.cc:        uint64_t srcoff = op->off;
Transaction.cc:        uint64_t len = op->len;
Transaction.cc:        uint64_t dstoff = op->dest_off;
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        uint32_t type = op->hint_type;
Transaction.cc:	coll_t cid = i.get_cid(op->cid);
Transaction.cc:	f->dump_unsigned("bits", op->split_bits);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        coll_t ocid = i.get_cid(op->cid);
Transaction.cc:        coll_t ncid = i.get_cid(op->dest_cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t ocid = i.get_cid(op->cid);
Transaction.cc:        coll_t ncid = i.get_cid(op->dest_cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        uint32_t bits = op->split_bits;
Transaction.cc:        uint32_t rem = op->split_rem;
Transaction.cc:        coll_t dest = i.get_cid(op->dest_cid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        uint32_t bits = op->split_bits;
Transaction.cc:        uint32_t rem = op->split_rem;
Transaction.cc:        coll_t dest = i.get_cid(op->dest_cid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        coll_t old_cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t old_oid = i.get_oid(op->oid);
Transaction.cc:        coll_t new_cid = i.get_cid(op->dest_cid);
Transaction.cc:        ghobject_t new_oid = i.get_oid(op->dest_oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t old_oid = i.get_oid(op->oid);
Transaction.cc:        ghobject_t new_oid = i.get_oid(op->dest_oid);
Transaction.cc:        coll_t cid = i.get_cid(op->cid);
Transaction.cc:        ghobject_t oid = i.get_oid(op->oid);
Transaction.cc:        uint64_t expected_object_size = op->expected_object_size;
Transaction.cc:        uint64_t expected_write_size = op->expected_write_size;
Transaction.cc:      f->dump_unsigned("op_code", op->op);
